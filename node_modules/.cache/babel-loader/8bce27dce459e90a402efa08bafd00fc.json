{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Phase-2-code-challenge/Challenge-1-Bank-of-Flatiron-021023/Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  const [query, setQuery] = useState(\"\"); // Changed initial state to an empty string\n\n  useEffect(() => {\n    fetch(\"http://localhost:8001/transactions\" + query).then(resp => {\n      if (!resp.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n\n      return resp.json();\n    }).then(data => setTransactions(data)).catch(error => console.error(\"Fetch error:\", error)); // Added error handling\n  }, []); // Changed dependency array to empty if you only want it to run once\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: transactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true);\n}\n\n_s(AccountContainer, \"bbyo2noKzR87TknOUBQrVFBuEtQ=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Phase-2-code-challenge/Challenge-1-Bank-of-Flatiron-021023/Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js"],"names":["React","useEffect","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transactions","setTransactions","query","setQuery","fetch","then","resp","ok","Error","json","data","catch","error","console","handleSearch","e","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAF0B,CAEc;;AAExCD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK,CAAC,uCAAuCF,KAAxC,CAAL,CACGG,IADH,CACSC,IAAD,IAAU;AACd,UAAI,CAACA,IAAI,CAACC,EAAV,EAAc;AACZ,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,aAAOF,IAAI,CAACG,IAAL,EAAP;AACD,KANH,EAOGJ,IAPH,CAOSK,IAAD,IAAUT,eAAe,CAACS,IAAD,CAPjC,EAQGC,KARH,CAQUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,cAAd,EAA8BA,KAA9B,CARpB,EADc,CAS6C;AAC5D,GAVQ,EAUN,EAVM,CAAT,CAJ0B,CAclB;;AAER,WAASE,YAAT,CAAsBC,CAAtB,EAAyB;AACvBZ,IAAAA,QAAQ,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,YAAY,EAAEH;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEd;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD;;GA3BQD,gB;;KAAAA,gB;AA6BT,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  const [transactions, setTransactions] = useState([]);\n  const [query, setQuery] = useState(\"\"); // Changed initial state to an empty string\n\n  useEffect(() => {\n    fetch(\"http://localhost:8001/transactions\" + query)\n      .then((resp) => {\n        if (!resp.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return resp.json();\n      })\n      .then((data) => setTransactions(data))\n      .catch((error) => console.error(\"Fetch error:\", error)); // Added error handling\n  }, []); // Changed dependency array to empty if you only want it to run once\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n  }\n\n  return (\n    <>\n      <Search handleSearch={handleSearch} />\n      <AddTransactionForm />\n      <TransactionsList transactions={transactions} /> {/* Changed variable name */}\n    </>\n  );\n}\n\nexport default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}