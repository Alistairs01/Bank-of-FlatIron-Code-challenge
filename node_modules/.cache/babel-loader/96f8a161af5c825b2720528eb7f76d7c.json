{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Phase-2-code-challenge/Challenge-1-Bank-of-Flatiron-021023/Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  _s();\n\n  const [transaction, setTransaction] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8001/transactions\" + (query ? \"?q=\" + query : \"\"));\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n\n        const data = await response.json();\n        setTransactions(data);\n      } catch (error) {\n        console.error(\"Fetch error:\", error); // Handle error appropriately, e.g., display an error message to the user\n      }\n    };\n\n    if (query !== null) {\n      fetchData();\n    }\n  }, [query]);\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: transaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AccountContainer, \"TGHL9Tu/fBV0orC7qrZLUvQWd6Q=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Phase-2-code-challenge/Challenge-1-Bank-of-Flatiron-021023/Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js"],"names":["React","useEffect","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transaction","setTransaction","query","setQuery","fetchData","response","fetch","ok","Error","data","json","setTransactions","error","console","handleSearch","e","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMU,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwCJ,KAAK,GAAG,QAAQA,KAAX,GAAmB,EAAhE,CAAD,CAA5B;;AACA,YAAI,CAACG,QAAQ,CAACE,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,cAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,QAAAA,eAAe,CAACF,IAAD,CAAf;AACD,OAPD,CAOE,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,cAAd,EAA8BA,KAA9B,EADc,CAEd;AACD;AACF,KAZD;;AAcA,QAAIV,KAAK,KAAK,IAAd,EAAoB;AAClBE,MAAAA,SAAS;AACV;AACF,GAnBQ,EAmBN,CAACF,KAAD,CAnBM,CAAT;;AAqBA,WAASY,YAAT,CAAsBC,CAAtB,EAAyB;AACvBZ,IAAAA,QAAQ,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,YAAY,EAAEH;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEd;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD;;GAnCQD,gB;;KAAAA,gB;AAqCT,eAAeA,gBAAf","sourcesContent":["import React, {useEffect,useState} from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  const [transaction, setTransaction] = useState([])\n  const [query, setQuery] = useState(\"\")\n  useEffect(() => {\n   \n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8001/transactions\" + (query ? \"?q=\" + query : \"\"));\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setTransactions(data);\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n        // Handle error appropriately, e.g., display an error message to the user\n      }\n    };\n\n    if (query !== null) {\n      fetchData();\n    }\n  }, [query]);\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n  }\n\n  return (\n    <>\n      <Search handleSearch={handleSearch} />\n      <AddTransactionForm />\n      <TransactionsList transactions={transaction} />\n    </>\n  );\n}\n\nexport default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}