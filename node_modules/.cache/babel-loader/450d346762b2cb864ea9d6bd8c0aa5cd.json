{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Phase-2-code-challenge/Challenge-1-Bank-of-Flatiron-021023/Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport TransactionTable from './TransactionTable';\nimport Search from './Search';\nimport AddTransactionForm from './AddTransactionForm';\n\nconst App = () => {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:8001/transactions');\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch transaction\");\n      }\n\n      const data = await response.json();\n      setTransactions(data);\n      /*setFilteredTransactions(data);*/\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setError('Failed to fetch tra');\n    }\n  };\n\n  const handleAddTransaction = async newTransaction => {\n    try {\n      const response = await fetch('http://localhost:8001/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTransaction)\n      });\n      const data = await response.json();\n      setTransactions([...transactions, data]);\n      setFilteredTransactions([...filteredTransactions, data]);\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n    }\n  };\n\n  const handleSearch = searchTerm => {\n    const filtered = transactions.filter(transaction => transaction.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    setFilteredTransactions(filtered);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionTable, {\n      transactions: filteredTransactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      onAddTransaction: handleAddTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"7na4B7SK+6CvvEHetQqCQKoiewE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Phase-2-code-challenge/Challenge-1-Bank-of-Flatiron-021023/Challenge-1-Bank-of-Flatiron/code-challenge/src/components/AccountContainer.js"],"names":["React","useState","useEffect","TransactionTable","Search","AddTransactionForm","App","transactions","setTransactions","filteredTransactions","setFilteredTransactions","fetchTransactions","response","fetch","ok","Error","data","json","error","console","setError","handleAddTransaction","newTransaction","method","headers","body","JSON","stringify","handleSearch","searchTerm","filtered","filter","transaction","description","toLowerCase","includes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,oBAAD,EAAuBC,uBAAvB,IAAkDT,QAAQ,CAAC,EAAD,CAAhE;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAW,6BAAX,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAT,MAAAA,eAAe,CAACQ,IAAD,CAAf;AACA;AAED,KATD,CASE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACAE,MAAAA,QAAQ,CAAE,qBAAF,CAAR;AACD;AACF,GAdD;;AAgBA,QAAMC,oBAAoB,GAAG,MAAOC,cAAP,IAA0B;AACrD,QAAI;AACF,YAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AACjEU,QAAAA,MAAM,EAAE,MADyD;AAEjEC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFwD;AAKjEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,cAAf;AAL2D,OAAvC,CAA5B;AAOA,YAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAT,MAAAA,eAAe,CAAC,CAAC,GAAGD,YAAJ,EAAkBS,IAAlB,CAAD,CAAf;AACAN,MAAAA,uBAAuB,CAAC,CAAC,GAAGD,oBAAJ,EAA0BO,IAA1B,CAAD,CAAvB;AACD,KAXD,CAWE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD;AACF,GAfD;;AAiBA,QAAMU,YAAY,GAAIC,UAAD,IAAgB;AACnC,UAAMC,QAAQ,GAAGvB,YAAY,CAACwB,MAAb,CAAqBC,WAAD,IACnCA,WAAW,CAACC,WAAZ,CAAwBC,WAAxB,GAAsCC,QAAtC,CAA+CN,UAAU,CAACK,WAAX,EAA/C,CADe,CAAjB;AAGAxB,IAAAA,uBAAuB,CAACoB,QAAD,CAAvB;AACD,GALD;;AAOA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEF;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEnB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,kBAAD;AAAoB,MAAA,gBAAgB,EAAEY;AAAtC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAvDD;;GAAMf,G;;KAAAA,G;AAyDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TransactionTable from './TransactionTable'; \nimport Search from './Search';\nimport AddTransactionForm from './AddTransactionForm';\nconst App = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:8001/transactions');\n      if (!response.ok) {\n        throw new Error( \"Failed to fetch transaction\");\n      }\n      const data = await response.json();\n      setTransactions(data);\n      /*setFilteredTransactions(data);*/\n\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setError( 'Failed to fetch tra')\n    }\n  };\n\n  const handleAddTransaction = async (newTransaction) => {\n    try {\n      const response = await fetch('http://localhost:8001/transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newTransaction),\n      });\n      const data = await response.json();\n      setTransactions([...transactions, data]);\n      setFilteredTransactions([...filteredTransactions, data]);\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n    }\n  };\n\n  const handleSearch = (searchTerm) => {\n    const filtered = transactions.filter((transaction) =>\n      transaction.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    setFilteredTransactions(filtered);\n  };\n\n  return (\n    <div>\n      <Search onSearch={handleSearch} />\n      <TransactionTable transactions={filteredTransactions} /> \n      <AddTransactionForm onAddTransaction={handleAddTransaction} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}